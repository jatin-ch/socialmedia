/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,26],$V3=[1,16],$V4=[1,11],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,9],$Vi=[1,10],$Vj=[1,8],$Vk=[1,17,18,20,23,27,31,32,33,34,35,36,37,38,39,40,43,44,47,48,50],$Vl=[2,77],$Vm=[1,33],$Vn=[11,17,18],$Vo=[20,23,31,32,33,34,35,36,37,38,39,40,43,44],$Vp=[11,15,17,18,20,22,23,31,32,33,34,35,36,37,38,39,40,42,43,44,45],$Vq=[11,20,22,23,27,31,32,33,34,35,36,37,38,39,40,42,43,44,47,48],$Vr=[1,11,15,17,18,20,22,23,27,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,48],$Vs=[1,11,15,17,18,20,22,23,27,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,48,50],$Vt=[15,22,23],$Vu=[1,71],$Vv=[1,68],$Vw=[1,67],$Vx=[2,72],$Vy=[1,69],$Vz=[1,70],$VA=[15,22],$VB=[2,15],$VC=[1,79],$VD=[42,45],$VE=[11,22,27,42,45,47,48],$VF=[1,17,18,20,23,27,31,32,33,34,35,36,37,38,39,40,43,44,47,48],$VG=[11,15],$VH=[15,27],$VI=[15,20,22,23,31,32,33,34,35,36,37,38,39,40,43,44],$VJ=[11,15,22],$VK=[15,22,27];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"space_cdata_statements":4,"space_cdata_statement":5,"statement":6,"space_cdata":7,"atrule":8,"ruleset":9,"selector_list":10,"{":11,"space_or_empty":12,"declarations":13,"declaration_list":14,"}":15,"any":16,",":17,"/":18,"property":19,":":20,"value":21,";":22,"IDENT":23,"anys":24,"block":25,"blocks":26,"ATKEYWORD":27,"atkeywords":28,"any_block_atkeyword_semi":29,"semis":30,"NUMBER":31,"PERCENTAGE":32,"DEMINSION":33,"STRING":34,"URI":35,"HASH":36,"UNICODERANGE":37,"INCLUDES":38,"DASHMATCH":39,"FUNCTION":40,"any_unuseds":41,")":42,"(":43,"[":44,"]":45,"unused":46,"CDO":47,"CDC":48,"unuseds":49,"S":50,"at_least_one_space":51,"$accept":0,"$end":1},
terminals_: {2:"error",11:"{",15:"}",17:",",18:"/",20:":",22:";",23:"IDENT",27:"ATKEYWORD",31:"NUMBER",32:"PERCENTAGE",33:"DEMINSION",34:"STRING",35:"URI",36:"HASH",37:"UNICODERANGE",38:"INCLUDES",39:"DASHMATCH",40:"FUNCTION",42:")",43:"(",44:"[",45:"]",47:"CDO",48:"CDC",50:"S"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[6,1],[6,1],[9,7],[10,1],[10,3],[10,3],[10,4],[10,4],[13,5],[13,0],[14,3],[14,4],[14,0],[19,1],[21,1],[21,2],[21,1],[21,2],[21,2],[21,3],[8,4],[8,5],[25,5],[26,1],[26,2],[26,0],[29,1],[29,1],[29,1],[29,1],[29,0],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,5],[16,5],[16,5],[24,1],[24,2],[24,0],[46,1],[46,2],[46,2],[46,2],[46,2],[49,1],[49,2],[49,0],[28,2],[28,3],[28,0],[30,2],[30,3],[30,0],[41,1],[41,1],[41,1],[41,1],[41,0],[7,1],[7,1],[7,1],[12,1],[12,0],[51,1],[51,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = [];
      if ($$[$0] !== null) this.$ = $$[$0];
      return this.$;
    
break;
case 2:

      this.$ = [];
      this.$.push($$[$0]);
    
break;
case 3:

      this.$ = [];
      if ($$[$0-1] !== null && $$[$0] !== null) {
        var s = this.$; 
        $$[$0-1].forEach(function(d) { s.push(d); });
        s.push($$[$0]);
      } else if ($$[$0-1] !== null && $$[$0] === null) {
        this.$ = $$[$0-1];
      } 
    
break;
case 4: case 6: case 7: case 9: case 10: case 11: case 19: case 32: case 33: case 34: case 35: case 54: case 69: case 71: case 76:
this.$ = $$[$0];
break;
case 5: case 15: case 18: case 31: case 36: case 53: case 57: case 58: case 61: case 64: case 67: case 72: case 73: case 74: case 75:
this.$ = null;
break;
case 8:

      this.$ = {};
      this.$.selector = $$[$0-6];
      this.$.declaration = [];
      var s = this.$;
      $$[$0-3] !== null? s.declaration.push($$[$0-3]) : '';
      $$[$0-2] !== null? $$[$0-2].forEach(function(d) { s.declaration.push(d); }) : ''
    
break;
case 12:
this.$ = $$[$0-3] + "," + $$[$0];
break;
case 13:
this.$ = $$[$0-3] + "/" + $$[$0];
break;
case 14:

      this.$ = {};
      if ($$[$0-4] !== null) this.$.key = $$[$0-4];
      if ($$[$0] !== null) this.$.value = $$[$0];
    
break;
case 16: case 20: case 22: case 29: case 51: case 59:

      this.$ = [];
      if ($$[$0] !== null) this.$.push($$[$0]);
    
break;
case 17:

      this.$ = [];
      this.$ = $$[$0-3];
      if ($$[$0] !== null) this.$.push($$[$0]);
    
break;
case 21: case 23: case 30: case 52: case 60:

      this.$ = [];
      var r = this.$;
      $$[$0-1] !== null? $$[$0-1].forEach(function(e) { r.push(e); }) : '';
      if ($$[$0] !== null) this.$.push($$[$0]);
    
break;
case 24: case 62: case 65:

      this.$ = [];
      if ($$[$0-1] !== null) this.$.push($$[$0-1]);
    
break;
case 25: case 63: case 66:

      this.$ = [];
      var r = this.$;
      $$[$0-2] !== null? $$[$0-2].forEach(function(e) { r.push(e); }) : '';
      if ($$[$0-1] !== null) this.$.push($$[$0-1]);
    
break;
case 26:

      this.$ = {};
      this.$[$$[$0-3]] = [];
      var r = this.$[$$[$0-3]];
      $$[$0-1] !== null? $$[$0-1].forEach(function(e) { r.push(e); }) : '';
      this.$[$$[$0-3]].push($$[$0]);
    
break;
case 27:

      this.$ = {};
      this.$[$$[$0-4]] = [];
      var r = this.$[$$[$0-4]];
      $$[$0-2] !== null? $$[$0-2].forEach(function(e) { r.push(e); }) : '';
    
break;
case 28:
this.$ = $$[$0-2];
break;
case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 55: case 56:
this.$ = $$[$0-1];
break;
case 48: case 49: case 50:
this.$ = $$[$0-4] + $$[$0-2] + $$[$0-1];
break;
case 68: case 70:

      this.$ = [];
      $$[$0] !== null? this.$.push($$[$0]) : '';
    
break;
case 77:
this.$ = "";
break;
case 78: case 79:
this.$ = " ";
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:5,8:6,9:7,10:12,16:13,17:$V0,18:$V1,20:$V2,23:$V3,27:$V4,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg,47:$Vh,48:$Vi,50:$Vj},{1:[3]},{1:[2,1],5:30,6:4,7:5,8:6,9:7,10:12,16:13,17:$V0,18:$V1,20:$V2,23:$V3,27:$V4,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg,47:$Vh,48:$Vi,50:$Vj},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,73]),o($Vk,[2,74]),o($Vk,[2,75]),o([11,20,22,23,31,32,33,34,35,36,37,38,39,40,43,44],$Vl,{12:31,51:32,50:$Vm}),{11:[1,34],17:[1,35],18:[1,36]},o($Vn,[2,9]),o($Vo,$Vl,{51:32,12:37,50:$Vm}),o($Vo,$Vl,{51:32,12:38,50:$Vm}),o($Vp,$Vl,{51:32,12:39,50:$Vm}),o($Vp,$Vl,{51:32,12:40,50:$Vm}),o($Vp,$Vl,{51:32,12:41,50:$Vm}),o($Vp,$Vl,{51:32,12:42,50:$Vm}),o($Vp,$Vl,{51:32,12:43,50:$Vm}),o($Vp,$Vl,{51:32,12:44,50:$Vm}),o($Vp,$Vl,{51:32,12:45,50:$Vm}),o($Vp,$Vl,{51:32,12:46,50:$Vm}),o($Vp,$Vl,{51:32,12:47,50:$Vm}),o($Vp,$Vl,{51:32,12:48,50:$Vm}),o($Vp,$Vl,{51:32,12:49,50:$Vm}),o($Vq,$Vl,{51:32,12:50,50:$Vm}),o($Vq,$Vl,{51:32,12:51,50:$Vm}),o([11,20,22,23,27,31,32,33,34,35,36,37,38,39,40,43,44,45,47,48],$Vl,{51:32,12:52,50:$Vm}),o($Vk,[2,3]),o([11,22],[2,53],{24:53,16:54,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg}),o($Vr,[2,76],{50:[1,55]}),o($Vs,[2,78]),o($Vt,$Vl,{51:32,12:56,50:$Vm}),o($Vo,$Vl,{51:32,12:57,50:$Vm}),o($Vo,$Vl,{51:32,12:58,50:$Vm}),{16:59,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},{16:60,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o($Vp,[2,37]),o($Vp,[2,38]),o($Vp,[2,39]),o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),o($Vp,[2,47]),{11:$Vu,16:62,20:$V2,22:$Vv,23:$V3,24:63,25:66,27:$Vw,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:61,42:$Vx,43:$Vf,44:$Vg,46:64,47:$Vy,48:$Vz,49:65},{11:$Vu,16:62,20:$V2,22:$Vv,23:$V3,24:63,25:66,27:$Vw,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:72,42:$Vx,43:$Vf,44:$Vg,46:64,47:$Vy,48:$Vz,49:65},{11:$Vu,16:62,20:$V2,22:$Vv,23:$V3,24:63,25:66,27:$Vw,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:73,43:$Vf,44:$Vg,45:$Vx,46:64,47:$Vy,48:$Vz,49:65},{11:$Vu,16:76,20:$V2,22:[1,75],23:$V3,25:74,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o([11,15,20,22,23,31,32,33,34,35,36,37,38,39,40,43,44],[2,51]),o($Vs,[2,79]),o($VA,$VB,{13:77,19:78,23:$VC}),{16:80,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},{16:81,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o($Vn,[2,10]),o($Vn,[2,11]),{42:[1,82]},o([20,23,31,32,33,34,35,36,37,38,39,40,42,43,44,45],[2,68]),o($VD,[2,69],{16:76,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg}),o($VE,[2,70]),o($VD,[2,71],{25:66,46:83,11:$Vu,22:$Vv,27:$Vw,47:$Vy,48:$Vz}),o($VE,[2,54]),o($VE,$Vl,{51:32,12:84,50:$Vm}),o($VE,$Vl,{51:32,12:85,50:$Vm}),o($VE,$Vl,{51:32,12:86,50:$Vm}),o($VE,$Vl,{51:32,12:87,50:$Vm}),o([11,15,20,22,23,27,31,32,33,34,35,36,37,38,39,40,43,44],$Vl,{51:32,12:88,50:$Vm}),{42:[1,89]},{45:[1,90]},o($Vk,[2,26]),o($VF,$Vl,{51:32,12:91,50:$Vm}),o([11,15,20,22,23,31,32,33,34,35,36,37,38,39,40,42,43,44,45],[2,52]),{14:92,15:[2,18],22:[1,93]},{12:94,20:$Vl,50:$Vm,51:32},o([20,50],[2,19]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vp,$Vl,{51:32,12:95,50:$Vm}),o($VE,[2,60]),o($VE,[2,55]),o($VE,[2,56]),o($VE,[2,57]),o($VE,[2,58]),{11:$Vu,15:[2,36],16:54,20:$V2,22:[1,103],23:$V3,24:97,25:101,26:98,27:[1,102],28:99,29:96,30:100,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o($Vp,$Vl,{51:32,12:104,50:$Vm}),o($Vp,$Vl,{51:32,12:105,50:$Vm}),o($Vk,[2,27]),{15:[1,106],22:[1,107]},o($Vt,$Vl,{51:32,12:108,50:$Vm}),{20:[1,109]},o($Vp,[2,48]),{15:[1,110]},{15:[2,32],16:76,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},{11:$Vu,15:[2,33],25:111},{15:[2,34],27:[1,112]},{15:[2,35],22:[1,113]},o($VG,[2,29]),o($VH,$Vl,{51:32,12:114,50:$Vm}),o($VA,$Vl,{51:32,12:115,50:$Vm}),o($Vp,[2,49]),o($Vp,[2,50]),o($VF,$Vl,{51:32,12:116,50:$Vm}),o($Vt,$Vl,{51:32,12:117,50:$Vm}),o($VA,$VB,{19:78,13:118,23:$VC}),o([11,20,23,27,31,32,33,34,35,36,37,38,39,40,43,44],$Vl,{51:32,12:119,50:$Vm}),o($Vr,$Vl,{51:32,12:120,50:$Vm}),o($VG,[2,30]),o($VH,$Vl,{51:32,12:121,50:$Vm}),o($VA,$Vl,{51:32,12:122,50:$Vm}),o($VH,[2,62]),o($VA,[2,65]),o($Vk,[2,8]),o($VA,$VB,{19:78,13:123,23:$VC}),o($VA,[2,16]),{11:$Vu,16:125,20:$V2,21:124,23:$V3,24:126,25:127,26:128,27:[1,129],28:130,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o($Vs,[2,28]),o($VH,[2,63]),o($VA,[2,66]),o($VA,[2,17]),o($VA,[2,14]),o($VI,[2,20]),{16:131,20:$V2,23:$V3,31:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,43:$Vf,44:$Vg},o($VJ,[2,22]),{11:$Vu,25:132},o($VK,$Vl,{51:32,12:133,50:$Vm}),{27:[1,134]},o($VI,[2,21]),o($VJ,[2,23]),o($VK,[2,24]),o($VK,$Vl,{51:32,12:135,50:$Vm}),o($VK,[2,25])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 50;
break;
case 1:
break;
case 2:
break;
case 3:return 47;
break;
case 4:return 48;
break;
case 5:return 38;
break;
case 6:return 39;
break;
case 7:return 34;
break;
case 8:return 'BAD_STRING';
break;
case 9:return 35;
break;
case 10:return 35;
break;
case 11:return 'BAD_URI';
break;
case 12:return 'IMPORTANT_SYM';
break;
case 13:return 37;
break;
case 14:return 40;
break;
case 15:return 23;
break;
case 16:return 'VENDOR';
break;
case 17:return 27;
break;
case 18:return 36;
break;
case 19:return 'EMS';
break;
case 20:return 'EXS';
break;
case 21:return 'LENGTH';
break;
case 22:return 'LENGTH';
break;
case 23:return 'LENGTH';
break;
case 24:return 'LENGTH';
break;
case 25:return 'LENGTH';
break;
case 26:return 'LENGTH';
break;
case 27:return 'ANGLE';
break;
case 28:return 'ANGLE';
break;
case 29:return 'ANGLE';
break;
case 30:return 'TIME';
break;
case 31:return 'TIME';
break;
case 32:return 'FREQ';
break;
case 33:return 'FREQ';
break;
case 34:return 'DIMENSION';
break;
case 35:return 32;
break;
case 36:return 31;
break;
case 37:return yy_.yytext; /* 'DELIM'; */
break;
}
},
rules: [/^(?:([ \t\r\n\f]+))/,/^(?:\/\*[^*]*\*+([^/*][^*]*\*+)*\/)/,/^(?:((\/\*[^*]*\*+([^/*][^*]*\*+)*)|(\/\*[^*]*(\*+[^/*][^*]*)*)))/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*')))/,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*\\?)|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*\\?)))/,/^(?:url\((([ \t\r\n\f]+)?)(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*'))(([ \t\r\n\f]+)?)\))/,/^(?:url\((([ \t\r\n\f]+)?)(([!#$%&*-~]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*)(([ \t\r\n\f]+)?)\))/,/^(?:((url\((([ \t\r\n\f]+)?)([!#$%&*-\[\]-~]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*(([ \t\r\n\f]+)?))|(url\((([ \t\r\n\f]+)?)(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*'))(([ \t\r\n\f]+)?))|(url\((([ \t\r\n\f]+)?)(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*\\?)|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*\\?)))))/,/^(?:!((([ \t\r\n\f]+)?)|(\/\*[^*]*\*+([^/*][^*]*\*+)*\/))*(I|i|\\0{0,4}(49|69)(\r\n|[ \t\r\n\f])?|\\[i])(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m])(P|p|\\0{0,4}(50|70)(\r\n|[ \t\r\n\f])?|\\[p])(O|o|\\0{0,4}(4f|6f)(\r\n|[ \t\r\n\f])?|\\[o])(R|r|\\0{0,4}(52|72)(\r\n|[ \t\r\n\f])?|\\[r])(T|t|\\0{0,4}(54|74)(\r\n|[ \t\r\n\f])?|\\[t])(A|a|\\0{0,4}(41|61)(\r\n|[ \t\r\n\f])?)(N|n|\\0{0,4}(4e|6e)(\r\n|[ \t\r\n\f])?|\\[n])(T|t|\\0{0,4}(54|74)(\r\n|[ \t\r\n\f])?|\\[t]))/,/^(?:(U|u|\\0{0,4}(55|75)(\r\n|[ \t\r\n\f])?|\\[u])\+([0-9a-fA-F?]{1,6}(-[0-9a-fA-F]{1,6})?))/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*)\()/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:([\-_]([0-9a-fA-F])-([0-9a-fA-F])))/,/^(?:@([\-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:#(([_a-zA-Z0-9\-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))+))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(E|e|\\0{0,4}(45|65)(\r\n|[ \t\r\n\f])?)(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(E|e|\\0{0,4}(45|65)(\r\n|[ \t\r\n\f])?)(X|x|\\0{0,4}(58|78)(\r\n|[ \t\r\n\f])?|\\[x]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(P|p|\\0{0,4}(50|70)(\r\n|[ \t\r\n\f])?|\\[p])(X|x|\\0{0,4}(58|78)(\r\n|[ \t\r\n\f])?|\\[x]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(C|c|\\0{0,4}(43|63)(\r\n|[ \t\r\n\f])?)(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m])(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(I|i|\\0{0,4}(49|69)(\r\n|[ \t\r\n\f])?|\\[i])(N|n|\\0{0,4}(4e|6e)(\r\n|[ \t\r\n\f])?|\\[n]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(P|p|\\0{0,4}(50|70)(\r\n|[ \t\r\n\f])?|\\[p])(T|t|\\0{0,4}(54|74)(\r\n|[ \t\r\n\f])?|\\[t]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(P|p|\\0{0,4}(50|70)(\r\n|[ \t\r\n\f])?|\\[p])(C|c|\\0{0,4}(43|63)(\r\n|[ \t\r\n\f])?))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(D|d|\\0{0,4}(44|64)(\r\n|[ \t\r\n\f])?)(E|e|\\0{0,4}(45|65)(\r\n|[ \t\r\n\f])?)(G|g|\\0{0,4}(47|67)(\r\n|[ \t\r\n\f])?|\\[g]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(R|r|\\0{0,4}(52|72)(\r\n|[ \t\r\n\f])?|\\[r])(A|a|\\0{0,4}(41|61)(\r\n|[ \t\r\n\f])?)(D|d|\\0{0,4}(44|64)(\r\n|[ \t\r\n\f])?))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(G|g|\\0{0,4}(47|67)(\r\n|[ \t\r\n\f])?|\\[g])(R|r|\\0{0,4}(52|72)(\r\n|[ \t\r\n\f])?|\\[r])(A|a|\\0{0,4}(41|61)(\r\n|[ \t\r\n\f])?)(D|d|\\0{0,4}(44|64)(\r\n|[ \t\r\n\f])?))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(M|m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\[m])(S|s|\\0{0,4}(53|73)(\r\n|[ \t\r\n\f])?|\\[s]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(S|s|\\0{0,4}(53|73)(\r\n|[ \t\r\n\f])?|\\[s]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(H|h|\\0{0,4}(48|68)(\r\n|[ \t\r\n\f])?|\\[h])(Z|z|\\0{0,4}(5a|7a)(\r\n|[ \t\r\n\f])?|\\[z]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)(K|k|\\0{0,4}(4b|6b)(\r\n|[ \t\r\n\f])?|\\[k])(H|h|\\0{0,4}(48|68)(\r\n|[ \t\r\n\f])?|\\[h])(Z|z|\\0{0,4}(5a|7a)(\r\n|[ \t\r\n\f])?|\\[z]))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)([\-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:([0-9]+|[0-9]*\.[0-9]+)%)/,/^(?:([0-9]+|[0-9]*\.[0-9]+))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}